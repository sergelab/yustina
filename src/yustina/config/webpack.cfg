var path = require("path");
var glob = require("glob");
var webpack = require("webpack");

var autoprefixer = require("autoprefixer");
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var ManifestPlugin = require("webpack-manifest-plugin");
var CopyWebpackPlugin = require("copy-webpack-plugin");

var rootAssetPath = "./assets/";

module.exports = {
    debug: false,
    cache: true,
    entry: {
        "admin_js": glob.sync('./src/admin/static/admin/js/app.js'),
        "admin_css": glob.sync('./src/admin/static/admin/css/app.css'),
        "yustina_js": glob.sync('./src/yustina/static/js/app.js'),
        "yustina_css": glob.sync('./src/yustina/static/css/app.css')
    },
    resolve: {
        root: path.join(path.resolve(__dirname), '..', '..', '..'),
        modulesDirectories: [
            'node_modules',
            './src/admin/static',
            './src/admin/static/admin',
            './src/admin/static/admin/js',
            './src/yustina/static/js'
        ],
        extensions: ['', '.js']
    },
    output: {
        path: rootAssetPath,
        publicPath: "/assets/",
        filename: "[name].[chunkhash].js",
        chunkFilename: "[id].[chunkhash].js",
        sourceMapFilename: "[name].map",
        library: "[name]"
    },
    module: {
        preLoaders: [
            {
                test: /\.js$/,
                loader: 'source-map-loader',
            }
        ],
        loaders: [
            {
                test: /\.js$/i,
                loader: 'babel',
                query: {
                    presets: ['es2015'],
                    plugins: ['transform-object-assign']
                },
                cacheDirectory: true,
                exclude: [/node_modules/]
            },
            {
                test: /\.css$/i,
                loader: ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader')
            },
            {
                test: /\.(jpe?g|ico|png|gif([\?]?.*))$/i,
                loaders: [
                    'file-loader?context=' + rootAssetPath + '&name=images/[name].[ext]'
                ]
            },
            {
                test: /\.svg$/i,
                loaders: [
                    'file-loader?&name=svg/[name].[hash].[ext]'
                ]
            },
            {
                test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: "url-loader?limit=10000&mimetype=application/font-woff"
            },
            {
                test: /\.(ttf|eot)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: "file-loader?context=" + rootAssetPath + "&name=fonts/[name].[hash].[ext]"
            }
        ]
    },
    postcss: function () {
        return [autoprefixer({ browsers: ['last 2 versions'] })];
    },
    plugins: [
        new CopyWebpackPlugin([
            { from: 'src/yustina/static/svg', to: 'images/' },
            { from: 'src/yustina/static/images', to: 'images/' }
        ]),
        new ExtractTextPlugin("[name].[chunkhash].css"),
        new webpack.ProvidePlugin({
            $: "jquery",
            jQuery: "jquery",
            "window.jQuery": "jquery"
        }),
        new ManifestPlugin({
            filename: path.join(rootAssetPath, "manifest.json")
        })
    ]
}
